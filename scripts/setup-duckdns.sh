#!/bin/bash

# DuckDNS Setup Script for Tailscale Direct Connections
# Automates the installation and configuration of DuckDNS service

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${2:-$GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    log "$1" "$RED" >&2
}

warning() {
    log "$1" "$YELLOW"
}

info() {
    log "$1" "$BLUE"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check system requirements
check_requirements() {
    info "Checking system requirements..."
    
    # Check for required commands
    local required_commands=("curl" "systemctl" "crontab")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            error "Required command not found: $cmd"
            exit 1
        fi
    done
    
    # Check if systemd is available
    if ! systemctl --version &> /dev/null; then
        error "systemd is required but not available"
        exit 1
    fi
    
    log "System requirements check passed"
}

# Install dependencies
install_dependencies() {
    info "Installing dependencies..."
    
    # Detect package manager and install curl if not present
    if command -v apt-get &> /dev/null; then
        apt-get update
        apt-get install -y curl
    elif command -v yum &> /dev/null; then
        yum install -y curl
    elif command -v pacman &> /dev/null; then
        pacman -S --noconfirm curl
    else
        warning "Unknown package manager. Please ensure curl is installed manually."
    fi
    
    log "Dependencies installed successfully"
}

# Get user input for configuration
get_user_input() {
    info "Please provide the required configuration:"
    
    # Get DuckDNS domain
    while true; do
        read -p "Enter your DuckDNS domain (without .duckdns.org): " DUCKDNS_DOMAIN
        if [[ -n "$DUCKDNS_DOMAIN" && "$DUCKDNS_DOMAIN" =~ ^[a-zA-Z0-9-]+$ ]]; then
            break
        else
            error "Invalid domain name. Use only letters, numbers, and hyphens."
        fi
    done
    
    # Get DuckDNS token
    while true; do
        read -p "Enter your DuckDNS token: " DUCKDNS_TOKEN
        if [[ -n "$DUCKDNS_TOKEN" && ${#DUCKDNS_TOKEN} -ge 32 ]]; then
            break
        else
            error "Invalid token. DuckDNS tokens are typically 36 characters long."
        fi
    done
    
    # Ask about IPv6 support
    read -p "Enable IPv6 updates? (y/N): " ENABLE_IPV6
    UPDATE_IPV6="false"
    if [[ "$ENABLE_IPV6" =~ ^[Yy]$ ]]; then
        UPDATE_IPV6="true"
    fi
    
    # Ask about update interval
    read -p "Update interval in minutes (default: 5): " UPDATE_INTERVAL
    UPDATE_INTERVAL=${UPDATE_INTERVAL:-5}
    
    # Validate update interval
    if ! [[ "$UPDATE_INTERVAL" =~ ^[0-9]+$ ]] || [[ "$UPDATE_INTERVAL" -lt 1 ]]; then
        error "Invalid update interval. Using default value of 5 minutes."
        UPDATE_INTERVAL=5
    fi
}

# Create configuration directory and file
create_configuration() {
    info "Creating configuration..."
    
    # Create configuration directory
    mkdir -p /etc/duckdns
    mkdir -p /var/log/duckdns
    mkdir -p /var/cache/duckdns
    
    # Create configuration file
    cat > /etc/duckdns/duckdns.conf << EOF
# DuckDNS Configuration File
# Generated by setup-duckdns.sh on $(date)

# DuckDNS domain (without .duckdns.org suffix)
DUCKDNS_DOMAIN="$DUCKDNS_DOMAIN"

# DuckDNS authentication token
DUCKDNS_TOKEN="$DUCKDNS_TOKEN"

# Enable IPv4 updates (true/false)
UPDATE_IPV4="true"

# Enable IPv6 updates (true/false)
UPDATE_IPV6="$UPDATE_IPV6"

# Log file location
LOG_FILE="/var/log/duckdns/duckdns.log"

# Force update on every run (true/false)
# Set to false to only update when IP changes
FORCE_UPDATE="false"
EOF
    
    # Set appropriate permissions
    chmod 600 /etc/duckdns/duckdns.conf
    chmod 755 /var/log/duckdns
    chmod 755 /var/cache/duckdns
    
    log "Configuration created successfully"
}

# Install the update script
install_update_script() {
    info "Installing DuckDNS update script..."
    
    # Copy the update script to system location
    local script_source="$(dirname "$0")/update-duckdns.sh"
    local script_dest="/usr/local/bin/update-duckdns.sh"
    
    if [[ -f "$script_source" ]]; then
        cp "$script_source" "$script_dest"
    else
        error "Update script not found at $script_source"
        exit 1
    fi
    
    # Make it executable
    chmod +x "$script_dest"
    
    log "Update script installed to $script_dest"
}

# Create and install systemd service
create_systemd_service() {
    info "Creating systemd service..."
    
    # Create the systemd service file
    cat > /etc/systemd/system/duckdns-updater.service << EOF
[Unit]
Description=DuckDNS Dynamic IP Updater
Documentation=https://www.duckdns.org/
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/update-duckdns.sh
User=root
StandardOutput=journal
StandardError=journal

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/log/duckdns /var/cache/duckdns
PrivateTmp=true
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true
EOF
    
    # Create the systemd timer file
    cat > /etc/systemd/system/duckdns-updater.timer << EOF
[Unit]
Description=Run DuckDNS updater every ${UPDATE_INTERVAL} minutes
Documentation=https://www.duckdns.org/
Requires=duckdns-updater.service

[Timer]
OnBootSec=${UPDATE_INTERVAL}min
OnUnitActiveSec=${UPDATE_INTERVAL}min
AccuracySec=1min

[Install]
WantedBy=timers.target
EOF
    
    # Reload systemd and enable the timer
    systemctl daemon-reload
    systemctl enable duckdns-updater.timer
    
    log "Systemd service and timer created successfully"
}

# Test the installation
test_installation() {
    info "Testing DuckDNS installation..."
    
    # Test the update script
    if /usr/local/bin/update-duckdns.sh --test; then
        log "Update script test passed"
    else
        error "Update script test failed"
        return 1
    fi
    
    # Test systemd service
    if systemctl start duckdns-updater.service; then
        log "Systemd service test passed"
    else
        error "Systemd service test failed"
        return 1
    fi
    
    # Check service status
    if systemctl is-active --quiet duckdns-updater.timer; then
        log "Systemd timer is active"
    else
        warning "Systemd timer is not active"
    fi
    
    log "Installation test completed successfully"
}

# Start the service
start_service() {
    info "Starting DuckDNS service..."
    
    # Start the timer
    systemctl start duckdns-updater.timer
    
    # Run an initial update
    systemctl start duckdns-updater.service
    
    log "DuckDNS service started successfully"
}

# Display completion message
show_completion_message() {
    echo
    log "ðŸŽ‰ DuckDNS setup completed successfully!"
    echo
    info "Configuration:"
    echo "  - Domain: $DUCKDNS_DOMAIN.duckdns.org"
    echo "  - Update interval: $UPDATE_INTERVAL minutes"
    echo "  - IPv6 enabled: $UPDATE_IPV6"
    echo "  - Config file: /etc/duckdns/duckdns.conf"
    echo "  - Log file: /var/log/duckdns/duckdns.log"
    echo
    info "Service commands:"
    echo "  - Check status: systemctl status duckdns-updater.timer"
    echo "  - View logs: journalctl -u duckdns-updater.service"
    echo "  - Manual update: /usr/local/bin/update-duckdns.sh --force"
    echo "  - Test connection: /usr/local/bin/update-duckdns.sh --test"
    echo
    info "Next steps:"
    echo "  1. Configure Tailscale to use $DUCKDNS_DOMAIN.duckdns.org"
    echo "  2. Test direct connections using scripts/test-connection.sh"
    echo "  3. Monitor logs for any issues"
    echo
}

# Main installation function
main() {
    log "Starting DuckDNS setup for Tailscale direct connections"
    
    check_root
    check_requirements
    install_dependencies
    get_user_input
    create_configuration
    install_update_script
    create_systemd_service
    test_installation
    start_service
    show_completion_message
}

# Handle script arguments
case "${1:-}" in
    --uninstall)
        info "Uninstalling DuckDNS service..."
        systemctl stop duckdns-updater.timer 2>/dev/null || true
        systemctl disable duckdns-updater.timer 2>/dev/null || true
        rm -f /etc/systemd/system/duckdns-updater.service
        rm -f /etc/systemd/system/duckdns-updater.timer
        rm -f /usr/local/bin/update-duckdns.sh
        rm -rf /etc/duckdns
        systemctl daemon-reload
        log "DuckDNS service uninstalled successfully"
        ;;
    --help|-h)
        echo "Usage: $0 [--uninstall|--help]"
        echo "  (no args)    Run the installation"
        echo "  --uninstall  Remove the DuckDNS service"
        echo "  --help       Show this help message"
        ;;
    "")
        main
        ;;
    *)
        error "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac